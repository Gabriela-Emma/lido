.auto_devops_custom: &auto_devops_custom |
  # Auto DevOps variables and functions
  [[ "$TRACE" ]] && set -xev
  # extract app version
  export APP_VERSION=$(awk '/version/{gsub(/("|",)/,"",$2);print $2};' package.json)
  export APP_VERSION_AND_BUILD="${APP_VERSION}-${CI_PIPELINE_ID}"

  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE
  export CI_APPLICATION_TAG=$APP_VERSION_AND_BUILD

  if [ -z ${AUTO_DEVOPS_REPLICAS_COUNT+x} ]; then
    export replicas="1"
  else
    export replicas="$AUTO_DEVOPS_REPLICAS_COUNT"
  fi

  if [ -z ${AUTO_DEVOPS_CERTMANAGER_SERVER+x} ]; then
    export cert_server='https://acme-staging-v02.api.letsencrypt.org/directory'
  else
    export cert_server="$AUTO_DEVOPS_CERTMANAGER_SERVER"
  fi

  if [[ "$CI_PROJECT_VISIBILITY" != "public" ]]; then
    export secret_name="deploy-token-$AUTO_DEVOPS_APP_PREFIX"
  else
    export secret_name=''
  fi

  # db_host="127.0.0.1"
  # if [ -n "$AUTO_DEVOPS_DB_HOST" ]; then
  #     db_host=$AUTO_DEVOPS_DB_HOST
  # fi

  function deploy_postgres_cdbsync() {
    helm repo add bitnami https://charts.bitnami.com/bitnami
    helm repo update
    if [ "${CI_ENVIRONMENT_NAME}" == "mainnet" ]; then
      export PRIMARY_MAX_MEM="32768Mi"
      export REPLICATION="replication"
      export HASURA_REPLICAS="3"
      export PGPOOL_REPLICAS="2"
      export POSTGRES_READ_REPLICAS="2"
    else
      export PRIMARY_MAX_MEM="16384Mi"
      export REPLICATION="standalone"
      export HASURA_REPLICAS="1"
      export POSTGRES_READ_REPLICAS="0"
      export PGPOOL_REPLICAS="0"
    fi

    echo "install postgres for dbsync"
    helm upgrade --install \
        --timeout 600s \
        --wait \
        --atomic \
        --namespace="$KUBE_NAMESPACE" \
        --create-namespace \
        -f ./chart/values.postgresql.yaml \
        --set global.postgresql.auth.postgresPassword="$POSTGRESQL_DB_SYNC_POSTGRES_PASSWORD" \
        --set global.postgresql.auth.database="$POSTGRESQL_DB_SYNC_DB" \
        --set global.postgresql.auth.password="$POSTGRESQL_DB_SYNC_PASSWORD" \
        --set global.pgpool.adminUsername="$POSTGRESQL_DBSYNC_PGPOOL_ADMIN_USERNAME" \
        --set global.pgpool.adminPassword="$POSTGRESQL_DBSYNC_PGPOOL_ADMIN_PASSWORD" \
        --set global.postgresql.repmgrPassword="$POSTGRESQL_DBSYNC_PGPOOL_ADMIN_PASSWORD" \
        --set pgpool.replicaCount="$PGPOOL_REPLICAS" \
        --set services.dbsync.hasura.replicaCount="$HASURA_REPLICAS" \
        --set services.dbsync.db.secret.POSTGRESQL_PASSWORD="$POSTGRESQL_DB_SYNC_PASSWORD" \
        --set services.dbsync.db.secret.POSTGRESQL_POSTGRES_PASSWORD="$POSTGRESQL_DB_SYNC_POSTGRES_PASSWORD" \
        --set persistence.size="$DBSYNC_POSTGRES_STORAGE_SIZE" \
        --set primary.resources.limits.memory="$PRIMARY_MAX_MEM" \
        --set readReplicas.persistence.size="$DBSYNC_POSTGRES_STORAGE_SIZE" \
        --set readReplicas.replicaCount="$POSTGRES_READ_REPLICAS" \
        --set architecture="$REPLICATION" \
        lidolovelace-dbsync-db \
        bitnami/postgresql
  }

  function deploy_postgres_web() {
    helm repo add bitnami https://charts.bitnami.com/bitnami
    helm repo update

    echo "install postgres for web"
    helm upgrade --install \
        --timeout 300s \
        --wait \
        --atomic \
        --namespace="$KUBE_NAMESPACE" \
        --create-namespace \
        -f ./chart/values.postgresql.yaml \
        --set global.postgresql.auth.database="$POSTGRESQL_WEB_DB" \
        --set global.postgresql.auth.username="$POSTGRESQL_WEB_USER" \
        --set global.postgresql.auth.password="$POSTGRESQL_WEB_PASSWORD" \
        --set global.postgresql.auth.postgresPassword="$POSTGRESQL_WEB_POSTGRES_PASSWORD" \
        --set primary.persistence.size="20Gi" \
        lidolovelace-web-db \
        bitnami/postgresql
  }

  function deploy_redis() {
    helm repo add bitnami https://charts.bitnami.com/bitnami
    helm repo update

    echo "install redis"
    helm upgrade --install \
        --timeout 300s \
        --wait \
        --atomic \
        --namespace="$KUBE_NAMESPACE" \
        --create-namespace \
        -f ./chart/values.redis.yaml \
        --set global.redis.password="$REDIS_PASSWORD" \
        --set auth.password="$REDIS_PASSWORD" \
        --set master.persistence.enabled="true" \
        redis \
        bitnami/redis
  }

  function deploy_web_services() {
    DEPLOYMENT_NAME="$AUTO_DEVOPS_APP_PREFIX-web.$CI_ENVIRONMENT_SLUG"
    cat $GOOGLE_CLOUD_KEY_FILE > ./chart/lidonation.com/service-account.json    
        
    echo "Deploying $DEPLOYMENT_NAME" 
    if [ "${CI_ENVIRONMENT_NAME}" == "mainnet" ]; then
      export ANNOTATIONS='traefik-redirect-http-to-https@kubernetescrd\,traefik-redirect-to-www@kubernetescrd\,traefik-default-headers@kubernetescrd'      
    else
      export ANNOTATIONS='traefik-redirect-http-to-https@kubernetescrd\,traefik-default-headers@kubernetescrd'
    fi

    helm template "$DEPLOYMENT_NAME" ./chart/lidonation.com \
      -f ./chart/values.yaml \
      --set application.track="$track" \
      --set GOOGLE_CLOUD_KEY_FILE="$GOOGLE_CLOUD_KEY_FILE" \
      --set certmanager.server="$cert_server" \
      --set services.ncdb.ingress.host="$NCDB_WEB_HOST" \
      --set services.ncdb.redisUrl="redis://:${REDIS_PASSWORD}@redis-master:6379/4" \
      --set services.web.certificate.host="$AUTO_DEVOPS_WEB_HOST" \
      --set services.web.ingress.host="$AUTO_DEVOPS_WEB_HOST" \
      --set services.web.ingress.hosts[0]="$AUTO_DEVOPS_WEB_DOMAIN" \
      --set services.web.ingress.hosts[1]="$AUTO_DEVOPS_DOMAIN" \
      --set services.web.ingress.tls[0].secretName="lidonation-com-tls" \
      --set services.web.ingress.tls[0].hosts[0]="$AUTO_DEVOPS_WEB_DOMAIN" \
      --set services.web.ingress.tls[0].hosts[1]="$AUTO_DEVOPS_DOMAIN" \
      --set services.web.replicaCount="$replicas" \
      --set services.web.ingress.annotations."traefik\.ingress\.kubernetes\.io\/router\.middlewares"="$ANNOTATIONS" \
      --set services.web.service.url="$AUTO_DEVOPS_WEB_HOST" \
      --set services.web.secret.app_key="$APP_KEY" \
      --set services.web.config.ANALYTICS_ID="$ANALYTICS_ID" \
      --set services.web.config.APP_URL="$AUTO_DEVOPS_WEB_HOST" \
      --set services.web.config.BLOCKFROST_PROJECT_ID="$BLOCKFROST_PROJECT_ID" \
      --set services.web.config.BLOCKFROST_BASE_URL="$BLOCKFROST_BASE_URL" \
      --set services.web.config.CLOUDFLARE_TOKEN="$CLOUDFLARE_TOKEN" \
      --set services.web.config.CARDANO_MINT_PAYMENT_ADDRESS="$CARDANO_MINT_PAYMENT_ADDRESS" \
      --set services.web.config.CARDANO_PHUFFY_TREASURER_ADDRESS="$CARDANO_PHUFFY_TREASURER_ADDRESS" \
      --set services.web.config.CARDANO_PHUFFY_GOVERNOR_ADDRESS="$CARDANO_PHUFFY_GOVERNOR_ADDRESS" \
      --set services.web.config.CARDANO_PHUFFY_ESCROW_ADDRESS="$CARDANO_PHUFFY_ESCROW_ADDRESS" \
      --set services.web.config.CARDANO_MINT_POLICY_ID="$CARDANO_MINT_POLICY_ID" \
      --set services.web.config.CARDANO_NETWORK_ID="$CARDANO_NETWORK_ID" \
      --set services.web.config.CARDANO_LIDO_DELEGATE_POLICY_ID="$CARDANO_LIDO_DELEGATE_POLICY_ID" \
      --set services.web.config.CARDANO_PHUFFY_VOTER_POLICY_ID="$CARDANO_PHUFFY_VOTER_POLICY_ID" \
      --set services.web.config.CARDANO_POOL_HASH="$CARDANO_POOL_HASH" \
      --set services.web.config.CARDANO_NETWORK_ARGUMENT="$CARDANO_NETWORK_ARGUMENT" \
      --set services.web.config.CARDANO_NETWORK="$CARDANO_NETWORK" \
      --set services.web.config.CARDANO_PHUFFY_CAUSE_PAYMENT_ADDRESS="$CARDANO_PHUFFY_CAUSE_PAYMENT_ADDRESS" \
      --set services.web.config.CARDANO_PHUFFY_COIN_POLICY_ID="$CARDANO_PHUFFY_COIN_POLICY_ID" \
      --set services.web.config.CARDANO_BLOCK_EXPLORER="$CARDANO_BLOCK_EXPLORER" \
      --set services.web.config.COIN_MARKET_CAP_API_KEY="$COIN_MARKET_CAP_API_KEY" \
      --set services.web.config.CATALYST_REPORTING_SPREADSHEET_ID="$CATALYST_REPORTING_SPREADSHEET_ID" \
      --set services.web.config.FACEBOOK_APP_ID="$FACEBOOK_APP_ID" \
      --set services.web.config.GOOGLE_CLIENT_ID="$GOOGLE_CLIENT_ID" \
      --set services.web.config.GOOGLE_CLIENT_SECRET="$GOOGLE_CLIENT_SECRET" \
      --set services.web.config.KUBERNETES_NAMESPACE="$KUBE_NAMESPACE" \
      --set services.web.config.MAILCHIMP_APIKEY="$MAILCHIMP_APIKEY" \
      --set services.web.config.MAILGUN_SECRET="$MAILGUN_SECRET" \
      --set services.web.config.MAIL_MAILER="$MAIL_MAILER" \
      --set services.web.config.MAILCHIMP_LIST_ID="$MAILCHIMP_LIST_ID" \
      --set services.web.config.POSTGRESQL_WEB_USER="$POSTGRESQL_WEB_USER" \
      --set services.web.config.ZOOM_DEFAULT_MEETING_USER="$ZOOM_DEFAULT_MEETING_USER" \
      --set services.web.secret.zoom_api_key="$ZOOM_CLIENT_KEY" \
      --set services.web.secret.zoom_api_secret="$ZOOM_CLIENT_SECRET" \
      --set services.web.secret.RECAPTCHA_V3_SECRET_KEY="$RECAPTCHA_V3_SECRET_KEY" \
      --set services.web.secret.RECAPTCHA_V3_SITE_KEY="$RECAPTCHA_V3_SITE_KEY" \
      --set services.web.secret.MAIL_USERNAME="$MAILTRAP_USERNAME" \
      --set services.web.secret.MAIL_PASSWORD="$MAILTRAP_PASSWORD" \
      --set services.web.secret.DEEPL_AUTH_KEY="$DEEPL_AUTH_KEY" \
      --set services.web.secret.INSPECTOR_INGESTION_KEY="$INSPECTOR_INGESTION_KEY" \
      --set services.web.secret.MEILISEARCH_KEY="$MEILISEARCH_KEY" \
      --set services.web.secret.STRIPE_SK="$STRIPE_SK" \
      --set services.web.secret.STRIPE_PK="$STRIPE_PK" \
      --set services.web.secret.TWITTER_CONSUMER_SECRET="$TWITTER_CONSUMER_SECRET" \
      --set services.web.secret.TWITTER_CONSUMER_KEY="$TWITTER_CONSUMER_KEY" \
      --set services.web.secret.TWITTER_ACCESS_TOKEN_SECRET="$TWITTER_ACCESS_TOKEN_SECRET" \
      --set services.web.secret.TWITTER_ACCESS_TOKEN="$TWITTER_ACCESS_TOKEN" \
      --set services.web.secret.TWITTER_BEARER_TOKEN="$TWITTER_BEARER_TOKEN" \
      --set services.web.secret.TWITTER_OAUTH_CLIENT_ID="$TWITTER_OAUTH_CLIENT_ID" \
      --set services.web.secret.TWITTER_OAUTH_CLIENT_SECRET="$TWITTER_OAUTH_CLIENT_SECRET" \
      --set services.web.secret.TWITTER_OAUTH_CALLBACK_URL="$TWITTER_OAUTH_CALLBACK_URL" \
      --set services.web_db.secret.POSTGRESQL_PASSWORD="$POSTGRESQL_WEB_PASSWORD" \
      --set services.web_db.secret.POSTGRESQL_POSTGRES_PASSWORD="$POSTGRESQL_WEB_POSTGRES_PASSWORD" \
      --set services.dbsync.db.secret.POSTGRESQL_PASSWORD="$POSTGRESQL_DB_SYNC_PASSWORD" \
      --set services.dbsync.db.secret.POSTGRESQL_POSTGRES_PASSWORD="$POSTGRESQL_DB_SYNC_POSTGRES_PASSWORD" \
      --set services.redis.secret.REDIS_PASSWORD="$REDIS_PASSWORD" \
      --set services.cardano.replicaCount="$replicas" \
      --set services.cardano.image.repository="$CI_APPLICATION_REPOSITORY/cardano" \
      --set services.cardano.config.METADATA_URL="$METADATA_URL" \
      --set services.cardano.config.NETWORK_ARGUMENT="$CARDANO_NETWORK_ARGUMENT" \
      --set services.cardano.config.CARDANO_NETWORK="$CARDANO_NETWORK" \
      --set services.cardano.config.NODE_PORT="$CARDANO_NODE_PORT" \
      --set services.cardano.config.RELAY2_PORT="$RELAY2_PORT" \
      --set services.cardano.config.POOL_ID="$POOL_ID" \
      --set services.cardano.config.STAKE_ADDR="$STAKE_ADDR" \
      --set services.cardano.config.PAYMENT_ADDR="$PAYMENT_ADDR" \
      --set services.elasticsearch.realm.user="$ES_ADMIN_USER" \
      --set image.tag="$CI_APPLICATION_TAG" \
      --set image.pullSecret="$secret_name" \
      --set namespace=${KUBE_NAMESPACE} \
      --namespace="$KUBE_NAMESPACE" \
      --version="$APP_VERSION"


    
    helm upgrade "$DEPLOYMENT_NAME" ./chart/lidonation.com \
      --wait \
      --install \
      --atomic \
      --timeout 600s \
      -f ./chart/values.yaml \
      --set application.track="$track" \
      --set GOOGLE_CLOUD_KEY_FILE="$GOOGLE_CLOUD_KEY_FILE" \
      --set certmanager.server="$cert_server" \
      --set services.ncdb.ingress.host="$NCDB_WEB_HOST" \
      --set services.ncdb.redisUrl="redis://:${REDIS_PASSWORD}@redis-master:6379/4" \
      --set services.web.certificate.host="$AUTO_DEVOPS_WEB_HOST" \
      --set services.web.ingress.host="$AUTO_DEVOPS_WEB_HOST" \
      --set services.web.ingress.hosts[0]="$AUTO_DEVOPS_WEB_DOMAIN" \
      --set services.web.ingress.hosts[1]="$AUTO_DEVOPS_DOMAIN" \
      --set services.web.ingress.tls[0].secretName="lidonation-com-tls" \
      --set services.web.ingress.tls[0].hosts[0]="$AUTO_DEVOPS_WEB_DOMAIN" \
      --set services.web.ingress.tls[0].hosts[1]="$AUTO_DEVOPS_DOMAIN" \
      --set services.web.replicaCount="$replicas" \
      --set services.web.ingress.annotations."traefik\.ingress\.kubernetes\.io\/router\.middlewares"="$ANNOTATIONS" \
      --set services.web.service.url="$AUTO_DEVOPS_WEB_HOST" \
      --set services.web.secret.app_key="$APP_KEY" \
      --set services.web.config.ANALYTICS_ID="$ANALYTICS_ID" \
      --set services.web.config.APP_URL="$AUTO_DEVOPS_WEB_HOST" \
      --set services.web.config.BLOCKFROST_PROJECT_ID="$BLOCKFROST_PROJECT_ID" \
      --set services.web.config.BLOCKFROST_BASE_URL="$BLOCKFROST_BASE_URL" \
      --set services.web.config.CLOUDFLARE_TOKEN="$CLOUDFLARE_TOKEN" \
      --set services.web.config.CARDANO_MINT_PAYMENT_ADDRESS="$CARDANO_MINT_PAYMENT_ADDRESS" \
      --set services.web.config.CARDANO_PHUFFY_TREASURER_ADDRESS="$CARDANO_PHUFFY_TREASURER_ADDRESS" \
      --set services.web.config.CARDANO_PHUFFY_GOVERNOR_ADDRESS="$CARDANO_PHUFFY_GOVERNOR_ADDRESS" \
      --set services.web.config.CARDANO_PHUFFY_ESCROW_ADDRESS="$CARDANO_PHUFFY_ESCROW_ADDRESS" \
      --set services.web.config.CARDANO_MINT_POLICY_ID="$CARDANO_MINT_POLICY_ID" \
      --set services.web.config.CARDANO_NETWORK_ID="$CARDANO_NETWORK_ID" \
      --set services.web.config.CARDANO_LIDO_DELEGATE_POLICY_ID="$CARDANO_LIDO_DELEGATE_POLICY_ID" \
      --set services.web.config.CARDANO_PHUFFY_VOTER_POLICY_ID="$CARDANO_PHUFFY_VOTER_POLICY_ID" \
      --set services.web.config.CARDANO_POOL_HASH="$CARDANO_POOL_HASH" \
      --set services.web.config.CARDANO_NETWORK_ARGUMENT="$CARDANO_NETWORK_ARGUMENT" \
      --set services.web.config.CARDANO_NETWORK="$CARDANO_NETWORK" \
      --set services.web.config.CARDANO_NODE_SOCKET_PATH="$CARDANO_NODE_SOCKET_PATH" \
      --set services.web.config.CARDANO_PHUFFY_CAUSE_PAYMENT_ADDRESS="$CARDANO_PHUFFY_CAUSE_PAYMENT_ADDRESS" \
      --set services.web.config.CARDANO_PHUFFY_COIN_POLICY_ID="$CARDANO_PHUFFY_COIN_POLICY_ID" \
      --set services.web.config.CARDANO_BLOCK_EXPLORER="$CARDANO_BLOCK_EXPLORER" \
      --set services.web.config.COIN_MARKET_CAP_API_KEY="$COIN_MARKET_CAP_API_KEY" \
      --set services.web.config.CATALYST_REPORTING_SPREADSHEET_ID="$CATALYST_REPORTING_SPREADSHEET_ID" \
      --set services.web.config.FACEBOOK_APP_ID="$FACEBOOK_APP_ID" \
      --set services.web.config.GOOGLE_CLIENT_ID="$GOOGLE_CLIENT_ID" \
      --set services.web.config.GOOGLE_CLIENT_SECRET="$GOOGLE_CLIENT_SECRET" \
      --set services.web.config.KUBERNETES_NAMESPACE="$KUBE_NAMESPACE" \
      --set services.web.config.MAILCHIMP_APIKEY="$MAILCHIMP_APIKEY" \
      --set services.web.config.MAILGUN_SECRET="$MAILGUN_SECRET" \
      --set services.web.config.MAIL_MAILER="$MAIL_MAILER" \
      --set services.web.config.MAILCHIMP_LIST_ID="$MAILCHIMP_LIST_ID" \
      --set services.web.config.POSTGRESQL_WEB_USER="$POSTGRESQL_WEB_USER" \
      --set services.web.config.ZOOM_DEFAULT_MEETING_USER="$ZOOM_DEFAULT_MEETING_USER" \
      --set services.web.secret.zoom_api_key="$ZOOM_CLIENT_KEY" \
      --set services.web.secret.zoom_api_secret="$ZOOM_CLIENT_SECRET" \
      --set services.web.secret.RECAPTCHA_V3_SECRET_KEY="$RECAPTCHA_V3_SECRET_KEY" \
      --set services.web.secret.RECAPTCHA_V3_SITE_KEY="$RECAPTCHA_V3_SITE_KEY" \
      --set services.web.secret.MAIL_USERNAME="$MAILTRAP_USERNAME" \
      --set services.web.secret.MAIL_PASSWORD="$MAILTRAP_PASSWORD" \
      --set services.web.secret.DEEPL_AUTH_KEY="$DEEPL_AUTH_KEY" \
      --set services.web.secret.INSPECTOR_INGESTION_KEY="$INSPECTOR_INGESTION_KEY" \
      --set services.web.secret.MEILISEARCH_KEY="$MEILISEARCH_KEY" \
      --set services.web.secret.STRIPE_SK="$STRIPE_SK" \
      --set services.web.secret.STRIPE_PK="$STRIPE_PK" \
      --set services.web.secret.TWITTER_CONSUMER_SECRET="$TWITTER_CONSUMER_SECRET" \
      --set services.web.secret.TWITTER_CONSUMER_KEY="$TWITTER_CONSUMER_KEY" \
      --set services.web.secret.TWITTER_ACCESS_TOKEN_SECRET="$TWITTER_ACCESS_TOKEN_SECRET" \
      --set services.web.secret.TWITTER_ACCESS_TOKEN="$TWITTER_ACCESS_TOKEN" \
      --set services.web.secret.TWITTER_BEARER_TOKEN="$TWITTER_BEARER_TOKEN" \
      --set services.web.secret.TWITTER_OAUTH_CLIENT_ID="$TWITTER_OAUTH_CLIENT_ID" \
      --set services.web.secret.TWITTER_OAUTH_CLIENT_SECRET="$TWITTER_OAUTH_CLIENT_SECRET" \
      --set services.web.secret.TWITTER_OAUTH_CALLBACK_URL="$TWITTER_OAUTH_CALLBACK_URL" \
      --set services.web_db.secret.POSTGRESQL_PASSWORD="$POSTGRESQL_WEB_PASSWORD" \
      --set services.web_db.secret.POSTGRESQL_POSTGRES_PASSWORD="$POSTGRESQL_WEB_POSTGRES_PASSWORD" \
      --set services.dbsync.db.secret.POSTGRESQL_PASSWORD="$POSTGRESQL_DB_SYNC_PASSWORD" \
      --set services.dbsync.db.secret.POSTGRESQL_POSTGRES_PASSWORD="$POSTGRESQL_DB_SYNC_POSTGRES_PASSWORD" \
      --set services.redis.secret.REDIS_PASSWORD="$REDIS_PASSWORD" \
      --set services.cardano.replicaCount="$replicas" \
      --set services.cardano.image.repository="$CI_APPLICATION_REPOSITORY/cardano" \
      --set services.cardano.config.METADATA_URL="$METADATA_URL" \
      --set services.cardano.config.NETWORK_ARGUMENT="$CARDANO_NETWORK_ARGUMENT" \
      --set services.cardano.config.CARDANO_NETWORK="$CARDANO_NETWORK" \
      --set services.cardano.config.NODE_PORT="$CARDANO_NODE_PORT" \
      --set services.cardano.config.RELAY2_PORT="$RELAY2_PORT" \
      --set services.cardano.config.POOL_ID="$POOL_ID" \
      --set services.cardano.config.STAKE_ADDR="$STAKE_ADDR" \
      --set services.cardano.config.PAYMENT_ADDR="$PAYMENT_ADDR" \
      --set services.elasticsearch.realm.user="$ES_ADMIN_USER" \
      --set image.tag="$CI_APPLICATION_TAG" \
      --set image.pullSecret="$secret_name" \
      --set namespace=${KUBE_NAMESPACE} \
      --namespace="$KUBE_NAMESPACE" \
      --create-namespace \
      --version="$APP_VERSION"
  }

  function deploy_dbsync() {
       DEPLOYMENT_NAME="$AUTO_DEVOPS_APP_PREFIX-dbsync.$CI_ENVIRONMENT_SLUG"

       echo "install $DEPLOYMENT_NAME via helm with cert manger $cert_server and $replicas replicas in $KUBE_NAMESPACE"       

      if [ "${CI_ENVIRONMENT_NAME}" != "main" ]; then
        export RESTORE_SNAPSHOT="$RESTORE_SNAPSHOT_TESTNET"
      fi
      if [ "${CI_ENVIRONMENT_NAME}" == "mainnet" ]; then
        export RESTORE_SNAPSHOT="$RESTORE_SNAPSHOT_MAINNET"
      fi

       helm upgrade "$DEPLOYMENT_NAME" ./chart/dbsync \
         --install \
         -f ./chart/values.yaml \
         --set application.track="$track" \
         --set certmanager.server="$cert_server" \
         --set postgresqlPassword="$POSTGRESQL_DB_SYNC_PASSWORD" \
         --set postgresqlPostgresPassword="$POSTGRESQL_DB_SYNC_POSTGRES_PASSWORD" \
         --set postgresqlDatabase="$POSTGRESQL_DB_SYNC_DB" \
         --set services.cardano.config.CARDANO_NETWORK="$CARDANO_NETWORK" \
         --set services.dbsync.restore_snapshot="$RESTORE_SNAPSHOT" \
         --set services.dbsync.db.secret.POSTGRESQL_DB="$POSTGRESQL_DB_SYNC_DB" \
         --set services.dbsync.db.secret.POSTGRESQL_PASSWORD="$POSTGRESQL_DB_SYNC_PASSWORD" \
         --set services.dbsync.db.secret.POSTGRESQL_POSTGRES_PASSWORD="$POSTGRESQL_DB_SYNC_POSTGRES_PASSWORD" \
         --set services.dbsync.graphql.image.tag="$DBSYNC_GRAPHQL_IMAGE_TAG" \
         --set services.dbsync.ogmios.image.tag="$DBSYNC_OGMIOS_IMAGE_TAG" \
         --set services.dbsync.graphql.ingress.host="$DBSYNC_GRAPHQL_HOST" \
         --set services.dbsync.hasura.ingress.host="$DBSYNC_HASURA_HOST" \
         --set services.dbsync.db.persistence.size="$DBSYNC_STORAGE_SIZE" \
         --set services.redis.secret.REDIS_PASSWORD="$REDIS_PASSWORD" \
         --set-file configurationFiles.config=./src/pool/config/$CARDANO_NETWORK/config.json \
         --set-file configurationFiles.ogmiosConfig=./src/pool/config/$CARDANO_NETWORK/config.ogmios.json \
         --set-file configurationFiles.dbSyncConfig=./src/pool/config/$CARDANO_NETWORK/dbsync-config.json \
         --set-file configurationFiles.topology=./src/pool/config/$CARDANO_NETWORK/topology.relay.json \
         --set image.tag="$CI_APPLICATION_TAG-$CARDANO_NETWORK" \
         --set image.pullSecret="$secret_name" \
         --set namespace=${KUBE_NAMESPACE} \
         --namespace="$KUBE_NAMESPACE" \
         --create-namespace \
         --version="$APP_VERSION"
  }

  function deploy_cncli() {
    DEPLOYMENT_NAME="$AUTO_DEVOPS_APP_PREFIX-cardano-cncli.$CI_ENVIRONMENT_SLUG"

    helm upgrade "$DEPLOYMENT_NAME" ./chart/cncli \
      --wait \
      --install \
      --atomic \
      -f ./chart/values.yaml \
      --timeout 300s \
      --set-file configurationFiles.topology.relay=./src/pool/config/$CARDANO_NETWORK/topology.relay.json \
      --set-file configurationFiles.topology.producer=./src/pool/config/$CARDANO_NETWORK/topology.producer.json \
      --set-file configurationFiles.testnetByronGenesis=./src/pool/config/build/preview-byron-genesis.json \
      --set-file configurationFiles.testnetShelleyGenesis=./src/pool/config/build/preview-shelley-genesis.json \
      --set-file configurationFiles.testnetShelleyGenesis=./src/pool/config/build/preview-conway-genesis.json \
      --set-file configurationFiles.testnetAlonzoGenesis=./src/pool/config/build/preview-alonzo-genesis.json \
      --set-file configurationFiles.mainnetShelleyGenesis=./src/pool/config/build/mainnet-shelley-genesis.json \
      --set-file configurationFiles.mainnetAlonzoGenesis=./src/pool/config/build/mainnet-alonzo-genesis.json \
      --set-file configurationFiles.mainnetAlonzoGenesis=./src/pool/config/build/mainnet-conway-genesis.json \
      --set image.tag="$CI_APPLICATION_TAG" \
      --set image.pullSecret="$secret_name" \
      --set namespace=${KUBE_NAMESPACE} \
      --namespace="$KUBE_NAMESPACE" \
      --create-namespace \
      --version="$APP_VERSION"
  }


  function deploy_lucid() {
    DEPLOYMENT_NAME="$AUTO_DEVOPS_APP_PREFIX-lucid.$CI_ENVIRONMENT_SLUG"

    helm upgrade "$DEPLOYMENT_NAME" ./chart/lucid \
      --wait \
      --install \
      --atomic \
      -f ./chart/values.yaml --timeout 300s \
      --set image.tag="$CI_APPLICATION_TAG" \
      --set image.pullSecret="$secret_name" \
      --set services.lucid.secret.blockfront_project_id="$BLOCKFROST_PROJECT_ID" \
      --set namespace=${KUBE_NAMESPACE} \
      --namespace="$KUBE_NAMESPACE" \
      --create-namespace \
      --version="$APP_VERSION"
  }
  
  function deploy_tx_sumit_api() {
    DEPLOYMENT_NAME="$AUTO_DEVOPS_APP_PREFIX-cardano-submit-tx.$CI_ENVIRONMENT_SLUG"
  
    echo "install $DEPLOYMENT_NAME via helm with cert manger $cert_server and $replicas replicas in $KUBE_NAMESPACE"    

    helm upgrade "$DEPLOYMENT_NAME" ./chart/tx \
      --wait \
      --install \
      --atomic \
      -f ./chart/values.yaml \
      --timeout 300s \
      --set application.track="$track" \
      --set certmanager.server="$cert_server" \
      --set postgresqlPostgresPassword="$POSTGRESQL_DB_SYNC_POSTGRES_PASSWORD" \
      --set postgresqlPassword="$POSTGRESQL_DB_SYNC_PASSWORD" \
      --set postgresqlDatabase="$POSTGRESQL_DB_SYNC_DB" \
      --set services.dbsync.db.secret.POSTGRESQL_DB="$POSTGRESQL_DB_SYNC_DB" \
      --set services.dbsync.db.secret.POSTGRESQL_PASSWORD="$POSTGRESQL_DB_SYNC_PASSWORD" \
      --set services.dbsync.db.secret.POSTGRESQL_POSTGRES_PASSWORD="$POSTGRESQL_DB_SYNC_POSTGRES_PASSWORD" \
      --set services.redis.secret.REDIS_PASSWORD="$REDIS_PASSWORD" \
      --set services.cardano.replicaCount="$replicas" \
      --set services.cardano.image.repository="$CI_APPLICATION_REPOSITORY/cardano" \
      --set services.cardano.config.AUTO_TOPOLOGY="$AUTO_TOPOLOGY" \
      --set services.cardano.config.METADATA_URL="$METADATA_URL" \
      --set services.cardano.config.NETWORK_ARGUMENT="$CARDANO_NETWORK_ARGUMENT" \
      --set services.cardano.config.CARDANO_NETWORK="$CARDANO_NETWORK" \
      --set services.cardano.config.NODE_PORT="$CARDANO_NODE_PORT" \
      --set services.cardano.config.RELAY2_PORT="$RELAY2_PORT" \
      --set services.cardano.config.SUBMIT_TX_PORT="$SUBMIT_TX_PORT" \
      --set services.cardano.config.POOL_ID="$POOL_ID" \
      --set services.cardano.config.STAKE_ADDR="$STAKE_ADDR" \
      --set services.cardano.config.PAYMENT_ADDR="$PAYMENT_ADDR" \
      --set services.cardano.config.KUBERNETES_NAMESPACE="$KUBE_NAMESPACE" \
      --set services.cardano.persistence.size="$CARDANO_NODE_STORAGE_SIZE" \
      --set services.elasticsearch.realm.user="$ES_ADMIN_USER" \
      --set services.submitApi.image.repository="$CI_APPLICATION_REPOSITORY/cardano-submit-tx-api" \
      --set services.submitApi.networkArg="$CARDANO_NETWORK_ARGUMENT" \
      --set services.submitApi.ingress.host="$SUBMIT_API_HOSTS" \
      --set-file configurationFiles.submitApiConfig=./src/pool/config/$CARDANO_NETWORK/submit-api-config.json \
      --set image.tag="$CI_APPLICATION_TAG" \
      --set image.pullSecret="$secret_name" \
      --set namespace=${KUBE_NAMESPACE} \
      --namespace="$KUBE_NAMESPACE" \
      --create-namespace \
      --create-namespace \
      --version="$APP_VERSION"
  }

  
  function deploy_cardano_configs() {
    DEPLOYMENT_NAME="$AUTO_DEVOPS_APP_PREFIX-cardano-configs.$CI_ENVIRONMENT_SLUG"
      
    helm upgrade "$DEPLOYMENT_NAME" ./chart/cardano-configs \
      --wait \
      --install \
      --atomic \
      -f ./chart/values.yaml \
      --timeout 300s \
      --set application.track="$track" \
      --set services.cardano.config.AUTO_TOPOLOGY="$AUTO_TOPOLOGY" \
      --set services.cardano.config.METADATA_URL="$METADATA_URL" \
      --set services.cardano.config.NETWORK_ARGUMENT="$CARDANO_NETWORK_ARGUMENT" \
      --set services.cardano.config.CARDANO_NETWORK="$CARDANO_NETWORK" \
      --set services.cardano.config.NODE_PORT="$CARDANO_NODE_PORT" \
      --set services.cardano.config.RELAY2_PORT="$RELAY2_PORT" \
      --set services.cardano.config.SUBMIT_TX_PORT="$SUBMIT_TX_PORT" \
      --set services.cardano.config.POOL_ID="$POOL_ID" \
      --set services.cardano.config.STAKE_ADDR="$STAKE_ADDR" \
      --set services.cardano.config.PAYMENT_ADDR="$PAYMENT_ADDR" \
      --set services.cardano.config.KUBERNETES_NAMESPACE="$KUBE_NAMESPACE" \
      --set-file configurationFiles.config=./src/pool/config/$CARDANO_NETWORK/config.json \
      --set-file configurationFiles.configProducer=./src/pool/config/$CARDANO_NETWORK/config.producer.json \
      --set-file configurationFiles.configRelay2=./src/pool/config/$CARDANO_NETWORK/config.relay2.json \
      --set-file configurationFiles.dbSyncConfig=./src/pool/config/$CARDANO_NETWORK/dbsync-config.json \
      --set-file configurationFiles.submitApiConfig=./src/pool/config/$CARDANO_NETWORK/submit-api-config.json \
      --set-file configurationFiles.topology.producer=./src/pool/config/$CARDANO_NETWORK/topology.producer.json \
      --set-file configurationFiles.topology.relay=./src/pool/config/$CARDANO_NETWORK/topology.relay.json \
      --set-file configurationFiles.topology.relay2=./src/pool/config/$CARDANO_NETWORK/topology.relay2.json \
      --set-file configurationFiles.topology.submittx=./src/pool/config/$CARDANO_NETWORK/topology.submittx.json \
      --set-file configurationFiles.testnetByronGenesis=./src/pool/config/build/preview-byron-genesis.json \
      --set-file configurationFiles.testnetShelleyGenesis=./src/pool/config/build/preview-shelley-genesis.json \
      --set-file configurationFiles.mainnetShelleyGenesis=./src/pool/config/build/mainnet-shelley-genesis.json \
      --set-file configurationFiles.testnetAlonzoGenesis=./src/pool/config/build/preview-alonzo-genesis.json \
      --set-file configurationFiles.mainnetAlonzoGenesis=./src/pool/config/build/mainnet-alonzo-genesis.json \
      --set-file configurationFiles.testnetConwayGenesis=./src/pool/config/build/preview-conway-genesis.json \
      --set-file configurationFiles.mainnetConwayGenesis=./src/pool/config/build/mainnet-conway-genesis.json \
      --set namespace=${KUBE_NAMESPACE} \
      --namespace="$KUBE_NAMESPACE" \
      --create-namespace \
      --version="$APP_VERSION"
  }

  function deploy_relays() {
    DEPLOYMENT_NAME="$AUTO_DEVOPS_APP_PREFIX-cardano-relays.$CI_ENVIRONMENT_SLUG"  
    echo "Deploying $DEPLOYMENT_NAME"
    
    helm upgrade "$DEPLOYMENT_NAME" ./chart/relays \
       --install \
       -f ./chart/values.yaml \
       --set application.track="$track" \
       --set certmanager.server="$cert_server" \
       --set postgresqlPostgresPassword="$POSTGRESQL_DB_SYNC_POSTGRES_PASSWORD" \
       --set postgresqlPassword="$POSTGRESQL_DB_SYNC_PASSWORD" \
       --set postgresqlDatabase="$POSTGRESQL_DB_SYNC_DB" \
       --set services.dbsync.db.secret.POSTGRESQL_DB="$POSTGRESQL_DB_SYNC_DB" \
       --set services.dbsync.db.secret.POSTGRESQL_PASSWORD="$POSTGRESQL_DB_SYNC_PASSWORD" \
       --set services.dbsync.db.secret.POSTGRESQL_POSTGRES_PASSWORD="$POSTGRESQL_DB_SYNC_POSTGRES_PASSWORD" \
       --set services.redis.secret.REDIS_PASSWORD="$REDIS_PASSWORD" \
       --set services.cardano.replicaCount="$replicas" \
       --set services.cardano.image.repository="$CI_APPLICATION_REPOSITORY/cardano" \
       --set services.cardano.config.AUTO_TOPOLOGY="$AUTO_TOPOLOGY" \
       --set services.cardano.config.METADATA_URL="$METADATA_URL" \
       --set services.cardano.config.NETWORK_ARGUMENT="$CARDANO_NETWORK_ARGUMENT" \
       --set services.cardano.config.CARDANO_NETWORK="$CARDANO_NETWORK" \
       --set services.cardano.config.NODE_PORT="$CARDANO_NODE_PORT" \
       --set services.cardano.config.RELAY2_PORT="$RELAY2_PORT" \
       --set services.cardano.config.POOL_ID="$POOL_ID" \
       --set services.cardano.config.STAKE_ADDR="$STAKE_ADDR" \
       --set services.cardano.persistence.size="$CARDANO_NODE_STORAGE_SIZE" \
       --set services.cardano.config.PAYMENT_ADDR="$PAYMENT_ADDR" \
       --set services.cardano.config.KUBERNETES_NAMESPACE="$KUBE_NAMESPACE" \
       --set services.elasticsearch.realm.user="$ES_ADMIN_USER" \
       --set image.tag="$CI_APPLICATION_TAG" \
       --set image.pullSecret="$secret_name" \
       --set namespace=${KUBE_NAMESPACE} \
       --namespace="$KUBE_NAMESPACE" \
      --create-namespace \
       --version="$APP_VERSION"
  }

  function deploy_producer() {
    DEPLOYMENT_NAME="$AUTO_DEVOPS_APP_PREFIX-cardano-producer.$CI_ENVIRONMENT_SLUG"  
    echo "Deploying $DEPLOYMENT_NAME"
    
    helm upgrade "$DEPLOYMENT_NAME" ./chart/producer \
       --install \
       -f ./chart/values.yaml \
       --set application.track="$track" \
       --set certmanager.server="$cert_server" \
       --set postgresqlPostgresPassword="$POSTGRESQL_DB_SYNC_POSTGRES_PASSWORD" \
       --set postgresqlPassword="$POSTGRESQL_DB_SYNC_PASSWORD" \
       --set postgresqlDatabase="$POSTGRESQL_DB_SYNC_DB" \
       --set services.dbsync.db.secret.POSTGRESQL_DB="$POSTGRESQL_DB_SYNC_DB" \
       --set services.dbsync.db.secret.POSTGRESQL_PASSWORD="$POSTGRESQL_DB_SYNC_PASSWORD" \
       --set services.dbsync.db.secret.POSTGRESQL_POSTGRES_PASSWORD="$POSTGRESQL_DB_SYNC_POSTGRES_PASSWORD" \
       --set services.redis.secret.REDIS_PASSWORD="$REDIS_PASSWORD" \
       --set services.cardano.replicaCount="$replicas" \
       --set services.cardano.image.repository="$CI_APPLICATION_REPOSITORY/cardano" \
       --set services.cardano.config.AUTO_TOPOLOGY="$AUTO_TOPOLOGY" \
       --set services.cardano.config.METADATA_URL="$METADATA_URL" \
       --set services.cardano.config.NETWORK_ARGUMENT="$CARDANO_NETWORK_ARGUMENT" \
       --set services.cardano.config.CARDANO_NETWORK="$CARDANO_NETWORK" \
       --set services.cardano.config.NODE_PORT="$CARDANO_NODE_PORT" \
       --set services.cardano.config.RELAY2_PORT="$RELAY2_PORT" \
       --set services.cardano.config.POOL_ID="$POOL_ID" \
       --set services.cardano.config.STAKE_ADDR="$STAKE_ADDR" \
       --set services.cardano.config.PAYMENT_ADDR="$PAYMENT_ADDR" \
       --set services.cardano.config.KUBERNETES_NAMESPACE="$KUBE_NAMESPACE" \
       --set services.cardano.persistence.size="$CARDANO_NODE_STORAGE_SIZE" \
       --set services.elasticsearch.realm.user="$ES_ADMIN_USER" \
       --set image.tag="$CI_APPLICATION_TAG" \
       --set image.pullSecret="$secret_name" \
       --set namespace=${KUBE_NAMESPACE} \
       --namespace="$KUBE_NAMESPACE" \
       --create-namespace \
       --version="$APP_VERSION"
  }

  function deploy_services() {
    if [[ "$DEPLOY_CARDANO_SERVICES" == 'True' || "$DEPLOY_CARDANO_SERVICES" == 'true' ]]; then
      deploy_cardano_configs
      deploy_relays
      deploy_producer
    fi  
    if [[ "$DEPLOY_CARDANO_RELAYS" == 'True' || "$DEPLOY_CARDANO_RELAYS" == 'true' ]]; then
      deploy_relays
    fi
    if [[ "$DEPLOY_CARDANO_PRODUCER" == 'True' || "$DEPLOY_CARDANO_PRODUCER" == 'true' ]]; then
      deploy_producer
    fi
    if [[ "$DEPLOY_CARDANO_CONFIGS" == 'True' || "$DEPLOY_CARDANO_CONFIGS" == 'true' ]]; then
      deploy_cardano_configs
    fi
    if [[ "$DEPLOY_CARDANO_TX_SUBMIT" == 'True' || "$DEPLOY_CARDANO_TX_SUBMIT" == 'true' ]]; then
      deploy_tx_sumit_api
    fi
    if [[ "$DEPLOY_CARDANO_CNCLI" == 'True' || "$DEPLOY_CARDANO_CNCLI" == 'true' ]]; then
      deploy_cncli
    fi
    if [[ "$DEPLOY_CARDANO_CNCLI" == 'True' || "$DEPLOY_CARDANO_CNCLI" == 'true' ]]; then
      deploy_tx_cncli
    fi
    if [[ "$DEPLOY_CARDANO_DBSYNC" == 'True' || "$DEPLOY_CARDANO_DBSYNC" == 'true' ]]; then
      deploy_dbsync
    fi
    if [[ "$DEPLOY_WEBSITE" == 'True' || "$DEPLOY_WEBSITE" == 'true' ]]; then
      deploy_web_services
    fi
    if [[ "$DEPLOY_LUCID" == 'True' || "$DEPLOY_LUCID" == 'true' ]]; then
      deploy_lucid
    fi
  }


cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ./src/www.lidonation.com/var/www/node_modules

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  HELM_VERSION: 3.12.0
  DEPLOY_INFRA:
    value: 'False'
    description: 'Install infrastructure services (redis, db-sync)'
  DEPLOY_WEBSITE:
    value: 'True'
    description: 'Build and deploy www.lidonation.com'
  DEPLOY_LUCID:
    value: 'False'
    description: 'Build and deploy lucid nestjs backend'
  DEPLOY_CARDANO_CONFIGS:
    value: 'False'
    description: 'Deploy shared configurations and secrets for cardano services.'
  DEPLOY_CARDANO_SERVICES:
    value: 'False'
    description: 'Install or recreate cardano pool (relays, producer)'
  DEPLOY_CARDANO_RELAYS:
    value: 'False'
    description: 'Install or recreate cardano pool relay(s)'
  DEPLOY_CARDANO_PRODUCER:
    value: 'False'
    description: 'Install or recreate cardano pool producer'
  DEPLOY_CARDANO_TX_SUBMIT:
    value: 'False'
    description: 'Install tx submit api.'
  DEPLOY_CARDANO_CNCLI:
    value: 'False'
    description: 'Install cncli services.'
  DEPLOY_CARDANO_DBSYNC:
    value: 'False'
    description: 'Install cardano dbsync services (ogmios, hasura, postgres, grapql)'
  CARDANO_DB_SYNC_BASE_IMAGE_VER:
    value: ''
    description: 'New tag for base image. Format V[N]'
  WEB_BASE_IMAGE_VER:
    value: ''
    description: 'New tag for WEB base image. Format V[N]'
  CARDANO_BASE_IMAGE_VER:
    value: ''
    description: 'Enter "true" to build/rebuild the base image.'
  CARDANO_BASE_IMAGE_BRANCH:
    value: ''
    description: '[Optional] If branch name is different from node version.'
  RESTORE_SNAPSHOT_TESTNET:
    value: ''
    description: 'Enter the preview dbsync snapshot if you wan to restore dbsync from snapshot.'
  RESTORE_SNAPSHOT_MAINNET:
    value: ''
    description: 'Enter the mainnet dbsync snapshot if you wan to restore dbsync from snapshot.'

services:
  - name: docker:dind
    alias: docker
    command: ["--tls=false"]

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

.setup: &setup
  - *auto_devops_custom
  - apk add --no-cache ca-certificates curl bash openssl git
  - curl -LO https://dl.k8s.io/release/v1.25.9/bin/linux/amd64/kubectl && chmod +x kubectl && mv kubectl /usr/local/bin/kubectl
  - curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 && chmod 700 get_helm.sh && DESIRED_VERSION=v$HELM_VERSION ./get_helm.sh
  - kubectl config get-contexts
  - kubectl config use-context lidonation/lidonation:lidonation

.infra_rules: &infra_rules
  - if: '$CI_COMMIT_BRANCH == "main" &&
              ($DEPLOY_INFRA == "True" || $DEPLOY_INFRA == "true")'
    when: manual
  - if: '$CI_COMMIT_BRANCH != "main" &&
            ($DEPLOY_INFRA == "True" || $DEPLOY_INFRA == "true")'
    when: manual

.deploy_template: &deploy_template
  image: alpine:3.16.1
  retry: 0
  cache: { }

.deploy_postgres_cdbsync: &deploy_postgres_cdbsync
  <<: *deploy_template
  script:
    - *setup
    - deploy_postgres_cdbsync
  rules: *infra_rules

.deploy_postgres_web: &deploy_postgres_web
  <<: *deploy_template
  script:
    - *setup
    - deploy_postgres_web
  rules: *infra_rules

.deploy_redis: &deploy_redis
  <<: *deploy_template
  script:
    - *setup
    - deploy_redis
  rules: *infra_rules

######################################### Pipelines ############################################
################################################################################################

########## Pre-Build jobs #########
###################################
yarn:
  stage: .pre
  image: node:15.9.0-alpine3.10
  services: []
  retry: 1
  before_script:
    - apk add --update curl && rm -rf /var/cache/apk/*
  script: |-
    set -vx
    export PATH=$PATH:/usr/local/bin
    cd ./src/www.lidonation.com/var/www
    curl -X GET https://www.lidonation.com/api/cache/snippets > ./storage/app/snippets.json
    touch .npmrc
    echo "//npm.pkg.github.com/:_authToken=${GITHUB_PACKAGE_REGISTRY_TOKEN}" > .npmrc
    echo '@spatie:registry=https://npm.pkg.github.com' >> .npmrc
    echo '@splidejs:registry=https://npm.pkg.github.com' >> .npmrc
    yarn config set ignore-engines true
    yarn install
    yarn run production
  artifacts:
    paths:
      - ./src/www.lidonation.com/var/www/public
    expire_in: 6 days
  rules:
    - if: '$CI_COMMIT_BRANCH != "main" && ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")'
    - if: '$CI_COMMIT_BRANCH == "main" && ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")'

composer:
  stage: .pre
  image: composer:2.2.6
  services: []
  retry: 1
  cache: { }
  variables:
    GIT_SUBMODULE_STRATEGY: normal
  script:
    - export PATH=$PATH:/usr/local/bin
    - composer install --no-dev -o -d ./src/www.lidonation.com/var/www --ignore-platform-reqs
    - mkdir -p src/www.lidonation.com/var/www/public/docs/asset
    - cp -rf ./src/www.lidonation.com/var/www/vendor/swagger-api/swagger-ui/dist/* ./src/www.lidonation.com/var/www/public/docs/asset/
  artifacts:
    paths:
      - ./src/www.lidonation.com/var/www/public/docs
      - ./src/www.lidonation.com/var/www/vendor
    expire_in: 6 days
  rules:
    - if: '$CI_COMMIT_BRANCH != "main" && ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")'
    - if: '$CI_COMMIT_BRANCH == "main" && ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")'

cnode_base:
  stage: build
  image: docker:24.0.2-git
  retry: 1
  cache: { }
  script:
    - *auto_devops_custom
    - |
      docker --version
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      docker build --network host \
        --build-arg VERSION="${CARDANO_BASE_IMAGE_VER}" \
        --build-arg BRANCH="${CARDANO_BASE_IMAGE_BRANCH:-${CARDANO_BASE_IMAGE_VER}}" \
        -f cardano.base.Dockerfile \
        -t "$CI_APPLICATION_REPOSITORY/ubuntu-ghc-cabal-libsodium-cardano:latest"  \
        -t "$CI_APPLICATION_REPOSITORY/ubuntu-ghc-cabal-libsodium-cardano:${CARDANO_BASE_IMAGE_VER}" \
        -t "$CI_APPLICATION_REPOSITORY/ubuntu-ghc-cabal-libsodium-cardano:${CARDANO_BASE_IMAGE_VER}-${CI_JOB_ID}" \
        .
      docker push "$CI_APPLICATION_REPOSITORY/ubuntu-ghc-cabal-libsodium-cardano:${CARDANO_BASE_IMAGE_VER}"
      docker push "$CI_APPLICATION_REPOSITORY/ubuntu-ghc-cabal-libsodium-cardano:latest"
  rules:
    - if: '$CARDANO_BASE_IMAGE_VER'

cdbsync_base:
  stage: build
  image: docker:24.0.2-git
  retry: 1
  cache: { }
  script:
    - *auto_devops_custom
    - |
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      docker build --network host \
        --build-arg VERSION=${CARDANO_DB_SYNC_BASE_IMAGE_VER} \
      -f cardano.dbSync.base.Dockerfile \
      -t ${CI_APPLICATION_REPOSITORY}/cardano-db-sync-base:latest \
      -t ${CI_APPLICATION_REPOSITORY}/cardano-db-sync-base:${CARDANO_DB_SYNC_BASE_IMAGE_VER} \
      .
      docker push "$CI_APPLICATION_REPOSITORY/cardano-db-sync-base:${CARDANO_DB_SYNC_BASE_IMAGE_VER}"
      docker push "$CI_APPLICATION_REPOSITORY/cardano-db-sync-base:latest"
  rules:
    - if: '$CARDANO_DB_SYNC_BASE_IMAGE_VER'

metadata_base:
  stage: .pre
  image: docker:24.0.2-git
  retry: 1
  cache: { }
  script:
    - *auto_devops_custom
    - |
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      
      git clone https://github.com/cardano-foundation/cardano-token-registry
      
      docker build --network host  \
      -f src/token-registry/Dockerfile \
      -t ${CI_APPLICATION_REPOSITORY}/cardano-metadata-server:latest \
      -t ${CI_APPLICATION_REPOSITORY}/cardano-metadata-server:${CARDANO_METADATA_SERVER_IMAGE_VER} \
      .
      docker push "$CI_APPLICATION_REPOSITORY/cardano-metadata-server:${CARDANO_METADATA_SERVER_IMAGE_VER}"
      docker push "$CI_APPLICATION_REPOSITORY/cardano-metadata-server:latest"
  rules:
    - if: '$CARDANO_METADATA_SERVER_IMAGE_VER'

web_base:
  stage: build
  image: docker:24.0.2-git
  retry: 1
  cache: { }
  script:
    - *auto_devops_custom
    - |
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo "Building web BASE Dockerfile..."
      docker build --network host  \
        -f ./src/www.lidonation.com/Dockerfile.base \
        -t "$CI_APPLICATION_REPOSITORY/www.lidonation.com.base:${WEB_BASE_IMAGE_VER}" \
        -t "$CI_APPLICATION_REPOSITORY/www.lidonation.com.base:latest" \
        ./src/www.lidonation.com/.

      echo "Pushing web to GitLab Container Registry..."
      docker push "$CI_APPLICATION_REPOSITORY/www.lidonation.com.base:${WEB_BASE_IMAGE_VER}"
      docker push "$CI_APPLICATION_REPOSITORY/www.lidonation.com.base:latest"
      echo ""
  rules:
    - if: '$WEB_BASE_IMAGE_VER'

########## Docker jobs #########
###################################
web:
  stage: build
  image: docker:24.0.2-git
  retry: 1
  cache: { }
  needs:
    - yarn
    - composer
    - job: web_base
      optional: true
  script:
    - *auto_devops_custom
    - |
      if [[  $CI_COMMIT_BRANCH != 'mainnet' ]]; then
        cat ./src/pool/config/metadata.tmpl.json |
        sed 's/\$POOL_HOMEPAGE'/$(echo $AUTO_DEVOPS_WEB_HOST | sed 's_/_\\/_g')/g |
        cat > ./src/www.lidonation.com/var/www/public/metadata.json
      fi
      echo 'metadata.json generated'
      cat ./src/www.lidonation.com/var/www/public/metadata.json

      echo 'generate nginx/fpm resolver for $KUBE_NAMESPACE'
      echo "resolver kube-dns.kube-system.svc.cluster.local valid=10s ipv6=off;"  > ./src/www.lidonation.com/etc/nginx/resolver.conf
      echo "set $backendfpm lidolovelace-web-fpm-service.${KUBE_NAMESPACE}.svc.cluster.local:9000;" >> ./src/www.lidonation.com/etc/nginx/resolver.conf
      echo "fastcgi_pass $backendfpm;" >> ./src/www.lidonation.com/etc/nginx/resolver.conf

      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo "Building web Dockerfile..."
      docker build --network host  \
        -f ./src/www.lidonation.com/Dockerfile -t "$CI_APPLICATION_REPOSITORY/www.lidonation.com:$CI_APPLICATION_TAG" \
        -t "$CI_APPLICATION_REPOSITORY/www.lidonation.com:latest" ./src/www.lidonation.com/.

      echo "Pushing web to GitLab Container Registry..."
      docker push "$CI_APPLICATION_REPOSITORY/www.lidonation.com:$CI_APPLICATION_TAG"
      docker push "$CI_APPLICATION_REPOSITORY/www.lidonation.com:latest"
      echo ""
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" &&
              ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")'
    - if: '$CI_COMMIT_BRANCH != "main" &&
              ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")'
      when: manual

lucid:
  stage: .pre
  image: docker:24.0.2-git
  services:
    - docker:dind
  retry: 1
  cache: { }
  script:
    - *auto_devops_custom
    - |
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo "Building lucid Dockerfile..."
      docker build --network host  \
        -f ./src/lucid.lidonation.com/Dockerfile -t "$CI_APPLICATION_REPOSITORY/lucid.lidonation.com:$CI_APPLICATION_TAG" \
        -t "$CI_APPLICATION_REPOSITORY/lucid.lidonation.com:latest" ./src/lucid.lidonation.com/.

      echo "Pushing web to GitLab Container Registry..."
      docker push "$CI_APPLICATION_REPOSITORY/lucid.lidonation.com:$CI_APPLICATION_TAG"
      docker push "$CI_APPLICATION_REPOSITORY/lucid.lidonation.com:latest"
      echo ""
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" &&
              ($DEPLOY_LUCID == "True" || $DEPLOY_LUCID == "true")'
    - if: '$CI_COMMIT_BRANCH != "main" &&
              ($DEPLOY_LUCID == "True" || $DEPLOY_LUCID == "true")'

cnode_submit_api:
  stage: build
  image: docker:24.0.2-git
  services:
    - docker:dind
  retry: 1
  cache: {}
  needs:
    - job: cnode_base
      optional: true
  script:
    - *auto_devops_custom
    - |
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"      
      docker build --network host -f submitTx.Dockerfile \
      -t "$CI_APPLICATION_REPOSITORY/cardano-submit-tx-api:$CI_APPLICATION_TAG" \
      -t "$CI_APPLICATION_REPOSITORY/cardano-submit-tx-api:latest" \
      .
      docker push "$CI_APPLICATION_REPOSITORY/cardano-submit-tx-api:$CI_APPLICATION_TAG"
      docker push "$CI_APPLICATION_REPOSITORY/cardano-submit-tx-api:latest"
  rules:
    - if: '$DEPLOY_CARDANO_TX_SUBMIT == "True" || $DEPLOY_CARDANO_TX_SUBMIT == "true"'

cnode:
  stage: build
  image: docker:24.0.2-git
  services:
    - docker:dind
  retry: 1
  cache: {}
  needs:
    - job: cnode_base
      optional: true
  script:
    - *auto_devops_custom
    - |
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      docker build --network host -f cardano.Dockerfile \
      -t "$CI_APPLICATION_REPOSITORY/cardano:$CI_APPLICATION_TAG" \
      -t "$CI_APPLICATION_REPOSITORY/cardano:latest" \
      .
      docker push "$CI_APPLICATION_REPOSITORY/cardano:$CI_APPLICATION_TAG"
      docker push "$CI_APPLICATION_REPOSITORY/cardano:latest"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" &&
              ($DEPLOY_CARDANO_SERVICES == "True" || $DEPLOY_CARDANO_SERVICES == "true")
              || ($DEPLOY_CARDANO_RELAYS == "True" || $DEPLOY_CARDANO_RELAYS == "true")
              || ($DEPLOY_CARDANO_PRODUCER == "True" || $DEPLOY_CARDANO_PRODUCER == "true")'
    - if: '$CI_COMMIT_BRANCH != "main" &&
              ($DEPLOY_CARDANO_SERVICES == "True" || $DEPLOY_CARDANO_SERVICES == "true")         
            || ($DEPLOY_CARDANO_RELAYS == "True" || $DEPLOY_CARDANO_RELAYS == "true")
            || ($DEPLOY_CARDANO_PRODUCER == "True" || $DEPLOY_CARDANO_PRODUCER == "true")'

cncli:
  stage: build
  image: docker:20.10.12-git
  services:
    - docker:dind-20.10.12
  retry: 1
  cache: {}
  needs:
    - job: cnode_base
      optional: true
  script:
    - *auto_devops_custom
    - |
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      docker build --network host -f cncli.Dockerfile \
      -t "$CI_APPLICATION_REPOSITORY/cncli:$CI_APPLICATION_TAG" \
      -t "$CI_APPLICATION_REPOSITORY/cncli:latest" \
      .
      docker push "$CI_APPLICATION_REPOSITORY/cncli:$CI_APPLICATION_TAG"
      docker push "$CI_APPLICATION_REPOSITORY/cncli:latest"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" &&
              ($DEPLOY_CARDANO_CNCLI == "True" || $DEPLOY_CARDANO_CNCLI == "true")'
    - if: '$CI_COMMIT_BRANCH != "main" &&
              ($DEPLOY_CARDANO_CNCLI == "True" || $DEPLOY_CARDANO_CNCLI == "true")'

cdbsync:
  stage: build
  image: docker:24.0.2-git
  services:
    - docker:dind
  retry: 1
  cache: {}
  needs:
    - job: cdbsync_base
      optional: true
  script:
    - *auto_devops_custom
    - |
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      docker build --network host -f cardano.dbSync.Dockerfile \
      --build-arg NETWORK_CONFIG="./src/pool/config/preview/dbsync-config.json" \
      --build-arg CARDANO_NETWORK="preview" \
      -t "$CI_APPLICATION_REPOSITORY/cardano-db-sync:$CI_APPLICATION_TAG-preview" \
      -t "$CI_APPLICATION_REPOSITORY/cardano-db-sync:latest-preview" \
      .
      docker push "$CI_APPLICATION_REPOSITORY/cardano-db-sync:$CI_APPLICATION_TAG-preview"
      docker push "$CI_APPLICATION_REPOSITORY/cardano-db-sync:latest-preview"
      
      docker build --network host -f cardano.dbSync.Dockerfile \
      --build-arg NETWORK_CONFIG="./src/pool/config/main/dbsync-config.json" \
      --build-arg CARDANO_NETWORK="main" \
      -t "$CI_APPLICATION_REPOSITORY/cardano-db-sync:$CI_APPLICATION_TAG-main" \
      -t "$CI_APPLICATION_REPOSITORY/cardano-db-sync:latest-main" \
      .
      docker push "$CI_APPLICATION_REPOSITORY/cardano-db-sync:$CI_APPLICATION_TAG-main"
      docker push "$CI_APPLICATION_REPOSITORY/cardano-db-sync:latest-main"
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" &&
              ($DEPLOY_CARDANO_DBSYNC == "True" || $DEPLOY_CARDANO_DBSYNC == "true")'
    - if: '$CI_COMMIT_BRANCH != "main" &&
              ($DEPLOY_CARDANO_DBSYNC == "True" || $DEPLOY_CARDANO_DBSYNC == "true")'


############ Test Jobs ###########
##################################

#test_phpunit:
#  stage: test
#  image: registry.lidonation.com/lidonation/lidonation/www.lidonation.com:latest
#  retry: 1
#  script:
#    - |
#      cd ./src/www.lidonation.com/var/www
#      cp .env.example .env
#      php artisan key:generate
#      php artisan test
#  rules:
#    - when: on_success


########## Deploy to test env Jobs #########
############################################

redis-test:
  <<: *deploy_redis
  stage: deploy
  needs: []
  environment:
    name: preview

postgres-cdbsync-test:
  <<: *deploy_postgres_cdbsync
  stage: deploy
  needs: []
  environment:
    name: preview

postgres-web-test:
  <<: *deploy_postgres_web
  stage: deploy
  needs: []
  environment:
    name: preview

review:
  <<: *deploy_template
  stage: deploy
  retry: 1
  needs:
    - job: web
      optional: true
    - job: cnode
      optional: true
    - job: cnode_submit_api
      optional: true
    - job: cdbsync
      optional: true
  script:
    - *setup
    - deploy_services
    - persist_environment_url
  environment:
    name: preview
  rules:
    - if: '(
              ($DEPLOY_CARDANO_CONFIGS == "True" || $DEPLOY_CARDANO_CONFIGS == "true")
              || ($DEPLOY_CARDANO_SERVICES == "True" || $DEPLOY_CARDANO_SERVICES == "true")
              || ($DEPLOY_CARDANO_RELAYS == "True" || $DEPLOY_CARDANO_RELAYS == "true")
              || ($DEPLOY_CARDANO_PRODUCER == "True" || $DEPLOY_CARDANO_PRODUCER == "true")
              || ($DEPLOY_CARDANO_DBSYNC == "True" || $DEPLOY_CARDANO_DBSYNC == "true")
              || ($DEPLOY_CARDANO_DBSYNC == "True" || $DEPLOY_CARDANO_DBSYNC == "true")
              || ($DEPLOY_CARDANO_TX_SUBMIT == "True" || $DEPLOY_CARDANO_TX_SUBMIT == "true")
              || ($DEPLOY_CARDANO_CNCLI == "True" || $DEPLOY_CARDANO_CNCLI == "true")              
            )'
      when: manual

preview:
  <<: *deploy_template
  stage: deploy
  retry: 1
  needs:
    - job: web
      optional: true
    - job: cnode
      optional: true
    - job: cnode_submit_api
      optional: true
    - job: cdbsync
      optional: true
  script:
    - *setup
    - deploy_services
    - persist_environment_url
  environment:
    name: preview
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && (
              ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")
              || ($DEPLOY_LUCID == "True" || $DEPLOY_LUCID == "true")
              )'
      when: manual
    - if: '$CI_COMMIT_BRANCH != "main" && (
              ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")
              || ($DEPLOY_LUCID == "True" || $DEPLOY_LUCID == "true")
              )'
      when: manual


########## Deploy to prod env Jobs #########
############################################

redis-prod:
  <<: *deploy_redis
  stage: deploy
  needs:
    - redis-test
  environment:
    name: mainnet

postgres-cdbsync-prod:
  <<: *deploy_postgres_cdbsync
  stage: deploy
  needs:
    - postgres-cdbsync-test
  environment:
    name: mainnet

postgres-web-prod:
  <<: *deploy_postgres_web
  stage: deploy
  needs:
    - postgres-web-test
  environment:
    name: mainnet

mainnet:
  <<: *deploy_template
  stage: deploy
  retry: 1
  needs:
    - review
  script:
    - *setup
    - deploy_services
    - persist_environment_url
  environment:
    name: mainnet
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && (
              ($DEPLOY_CARDANO_CONFIGS == "True" || $DEPLOY_CARDANO_CONFIGS == "true")
              || ($DEPLOY_CARDANO_SERVICES == "True" || $DEPLOY_CARDANO_SERVICES == "true")
              || ($DEPLOY_CARDANO_RELAYS == "True" || $DEPLOY_CARDANO_RELAYS == "true")
              || ($DEPLOY_CARDANO_PRODUCER == "True" || $DEPLOY_CARDANO_PRODUCER == "true")
              || ($DEPLOY_CARDANO_DBSYNC == "True" || $DEPLOY_CARDANO_DBSYNC == "true")
              || ($DEPLOY_CARDANO_TX_SUBMIT == "True" || $DEPLOY_CARDANO_TX_SUBMIT == "true")
              )'
      when: manual

production:
  <<: *deploy_template
  stage: deploy
  retry: 1
  needs:
    - preview
  script:
    - *setup
    - deploy_services
    - persist_environment_url
  environment:
    name: mainnet
  rules:
    - if: '$CI_COMMIT_BRANCH == "main" && (
              ($DEPLOY_WEBSITE == "True" || $DEPLOY_WEBSITE == "true")
              || ($DEPLOY_LUCID == "True" || $DEPLOY_LUCID == "true")
          )'
      when: manual
