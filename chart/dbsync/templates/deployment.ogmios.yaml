apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ $.Chart.Name }}-ogmios"
  namespace: {{ .Values.namespace }}
  labels:
    app: "{{ $.Chart.Name }}"
    service: "{{ $.Chart.Name }}-ogmios"
spec:
  selector:
    matchLabels:
      app: "{{ $.Chart.Name }}"
      service: "{{ $.Chart.Name }}-ogmios"
  replicas: {{ .Values.services.dbsync.ogmios.replicaCount }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: "{{ $.Chart.Name }}"
        service: "{{ $.Chart.Name }}-ogmios"
    spec:
      imagePullSecrets:
        - name: {{ .Values.image.pullSecret }}
      volumes:
        - name: config
          emptyDir: {}
        - name: node-ipc
          emptyDir: {}
        - name: dbsync-configurations
          configMap:
            name: "{{ $.Chart.Name }}-configurations-configmap"
        - name: node-configurations
          configMap:
            name: "lidolovelace-cardano-configurations-configmap"
        - name: "{{ $.Chart.Name }}-cardano-db-sync-pv"
          persistentVolumeClaim:
            claimName: "{{ .Values.namespace }}-data-db-sync-pvc"
      initContainers:
        - name: setup
          image: busybox
          command: ["/bin/sh"]
          args:
            - -c
            - >-
              mkdir -p /config &&
              cat /tmp/config/topology.json > /config/topology.json &&
              cat /tmp/config/config.ogmios.json > /config/config.json
          volumeMounts:
            - name: dbsync-configurations
              mountPath: /tmp/config
              readOnly: false
            - name: "{{ $.Chart.Name }}-cardano-db-sync-pv"
              mountPath: /config
              subPath: "lido/{{.Values.services.cardano.config.CARDANO_NETWORK}}/cdbsync/config"
              readOnly: false
#            - name: config
#              mountPath: /config
#              readOnly: false
      containers:
      - name: app
        image: "{{ .Values.services.dbsync.ogmios.image.repository }}:{{ .Values.services.dbsync.ogmios.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args: [
            "--host", "0.0.0.0",
            "--node-socket", "/ipc/node.socket",
            "--node-config", "/config/config.json"
        ]
        resources:
          limits:
            memory: 2048Mi
            cpu: 400
          requests:
            cpu: 100m
            memory: 256Mi
        envFrom:
          - configMapRef:
              name: "lidolovelace-cardano-configmap"
        env:
          - name: POSTGRES_HOST
            value: "lidolovelace-db-sync-db-postgresql"
          - name: HASURA_URI
            value: "lidolovelace-dbsync-hasura-service:8080"
          - name: LOGGER_MIN_SEVERITY
            value: info
          - name: CARDANO_NODE_CONFIG_PATH
            value: "/config/config.json"
        ports:
          - name: ogmios
            containerPort: 1337
            protocol: TCP
        volumeMounts:
          - name: "{{ $.Chart.Name }}-cardano-db-sync-pv"
            mountPath: /config
            subPath: "lido/{{.Values.services.cardano.config.CARDANO_NETWORK}}/cdbsync/config"
            readOnly: false
          - name: node-ipc
            mountPath: /ipc
            readOnly: false
      - name: ipc
        image: alpine/socat:1.7.4.4-r0
        env:
        - name: CARDANO_NODE_SOCKET_TCP_HOST
          value: "lidolovelace-cardano-relay-1-service"
        - name: CARDANO_NODE_SOCKET_TCP_PORT
          value: "30111"
        - name: SOCAT_TIMEOUT
          value: "3600"
        command: [
            "sh",
            "-c",
            "socat UNIX-LISTEN:/ipc/node.socket,fork TCP:${CARDANO_NODE_SOCKET_TCP_HOST}:${CARDANO_NODE_SOCKET_TCP_PORT},ignoreeof"
        ]
        volumeMounts:
        - mountPath: /ipc
          name: node-ipc
          readOnly: false
      tolerations:
        - key: "tier"
          operator: "Equal"
          value: "t0"
        - key: "tier"
          operator: "Equal"
          value: "t1"
        - key: "tier"
          operator: "Equal"
          value: "t2"